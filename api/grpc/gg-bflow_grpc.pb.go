// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gg_bflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GGBFlowClient is the client API for GGBFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GGBFlowClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckRes, error)
	LoadDiscreteFlow(ctx context.Context, in *LoadArg, opts ...grpc.CallOption) (*FlowRes, error)
	SendDiscreteFlow(ctx context.Context, in *SendArg, opts ...grpc.CallOption) (*Ok, error)
	LoadFlow(ctx context.Context, opts ...grpc.CallOption) (GGBFlow_LoadFlowClient, error)
	SendFlow(ctx context.Context, opts ...grpc.CallOption) (GGBFlow_SendFlowClient, error)
	SaveMeta(ctx context.Context, in *MetaArg, opts ...grpc.CallOption) (*Ok, error)
	LoadMeta(ctx context.Context, in *LoadArg, opts ...grpc.CallOption) (*MetaRes, error)
}

type gGBFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewGGBFlowClient(cc grpc.ClientConnInterface) GGBFlowClient {
	return &gGBFlowClient{cc}
}

func (c *gGBFlowClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckRes, error) {
	out := new(HealthCheckRes)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlow/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gGBFlowClient) LoadDiscreteFlow(ctx context.Context, in *LoadArg, opts ...grpc.CallOption) (*FlowRes, error) {
	out := new(FlowRes)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlow/LoadDiscreteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gGBFlowClient) SendDiscreteFlow(ctx context.Context, in *SendArg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlow/SendDiscreteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gGBFlowClient) LoadFlow(ctx context.Context, opts ...grpc.CallOption) (GGBFlow_LoadFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &GGBFlow_ServiceDesc.Streams[0], "/ggbflow.GGBFlow/LoadFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &gGBFlowLoadFlowClient{stream}
	return x, nil
}

type GGBFlow_LoadFlowClient interface {
	Send(*LoadArg) error
	Recv() (*FlowRes, error)
	grpc.ClientStream
}

type gGBFlowLoadFlowClient struct {
	grpc.ClientStream
}

func (x *gGBFlowLoadFlowClient) Send(m *LoadArg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gGBFlowLoadFlowClient) Recv() (*FlowRes, error) {
	m := new(FlowRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gGBFlowClient) SendFlow(ctx context.Context, opts ...grpc.CallOption) (GGBFlow_SendFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &GGBFlow_ServiceDesc.Streams[1], "/ggbflow.GGBFlow/SendFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &gGBFlowSendFlowClient{stream}
	return x, nil
}

type GGBFlow_SendFlowClient interface {
	Send(*SendArg) error
	CloseAndRecv() (*Ok, error)
	grpc.ClientStream
}

type gGBFlowSendFlowClient struct {
	grpc.ClientStream
}

func (x *gGBFlowSendFlowClient) Send(m *SendArg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gGBFlowSendFlowClient) CloseAndRecv() (*Ok, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ok)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gGBFlowClient) SaveMeta(ctx context.Context, in *MetaArg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlow/SaveMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gGBFlowClient) LoadMeta(ctx context.Context, in *LoadArg, opts ...grpc.CallOption) (*MetaRes, error) {
	out := new(MetaRes)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlow/LoadMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GGBFlowServer is the server API for GGBFlow service.
// All implementations must embed UnimplementedGGBFlowServer
// for forward compatibility
type GGBFlowServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckRes, error)
	LoadDiscreteFlow(context.Context, *LoadArg) (*FlowRes, error)
	SendDiscreteFlow(context.Context, *SendArg) (*Ok, error)
	LoadFlow(GGBFlow_LoadFlowServer) error
	SendFlow(GGBFlow_SendFlowServer) error
	SaveMeta(context.Context, *MetaArg) (*Ok, error)
	LoadMeta(context.Context, *LoadArg) (*MetaRes, error)
	mustEmbedUnimplementedGGBFlowServer()
}

// UnimplementedGGBFlowServer must be embedded to have forward compatible implementations.
type UnimplementedGGBFlowServer struct {
}

func (UnimplementedGGBFlowServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGGBFlowServer) LoadDiscreteFlow(context.Context, *LoadArg) (*FlowRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadDiscreteFlow not implemented")
}
func (UnimplementedGGBFlowServer) SendDiscreteFlow(context.Context, *SendArg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDiscreteFlow not implemented")
}
func (UnimplementedGGBFlowServer) LoadFlow(GGBFlow_LoadFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadFlow not implemented")
}
func (UnimplementedGGBFlowServer) SendFlow(GGBFlow_SendFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFlow not implemented")
}
func (UnimplementedGGBFlowServer) SaveMeta(context.Context, *MetaArg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMeta not implemented")
}
func (UnimplementedGGBFlowServer) LoadMeta(context.Context, *LoadArg) (*MetaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMeta not implemented")
}
func (UnimplementedGGBFlowServer) mustEmbedUnimplementedGGBFlowServer() {}

// UnsafeGGBFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GGBFlowServer will
// result in compilation errors.
type UnsafeGGBFlowServer interface {
	mustEmbedUnimplementedGGBFlowServer()
}

func RegisterGGBFlowServer(s grpc.ServiceRegistrar, srv GGBFlowServer) {
	s.RegisterService(&GGBFlow_ServiceDesc, srv)
}

func _GGBFlow_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlow/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GGBFlow_LoadDiscreteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowServer).LoadDiscreteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlow/LoadDiscreteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowServer).LoadDiscreteFlow(ctx, req.(*LoadArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _GGBFlow_SendDiscreteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowServer).SendDiscreteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlow/SendDiscreteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowServer).SendDiscreteFlow(ctx, req.(*SendArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _GGBFlow_LoadFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GGBFlowServer).LoadFlow(&gGBFlowLoadFlowServer{stream})
}

type GGBFlow_LoadFlowServer interface {
	Send(*FlowRes) error
	Recv() (*LoadArg, error)
	grpc.ServerStream
}

type gGBFlowLoadFlowServer struct {
	grpc.ServerStream
}

func (x *gGBFlowLoadFlowServer) Send(m *FlowRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gGBFlowLoadFlowServer) Recv() (*LoadArg, error) {
	m := new(LoadArg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GGBFlow_SendFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GGBFlowServer).SendFlow(&gGBFlowSendFlowServer{stream})
}

type GGBFlow_SendFlowServer interface {
	SendAndClose(*Ok) error
	Recv() (*SendArg, error)
	grpc.ServerStream
}

type gGBFlowSendFlowServer struct {
	grpc.ServerStream
}

func (x *gGBFlowSendFlowServer) SendAndClose(m *Ok) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gGBFlowSendFlowServer) Recv() (*SendArg, error) {
	m := new(SendArg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GGBFlow_SaveMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowServer).SaveMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlow/SaveMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowServer).SaveMeta(ctx, req.(*MetaArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _GGBFlow_LoadMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowServer).LoadMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlow/LoadMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowServer).LoadMeta(ctx, req.(*LoadArg))
	}
	return interceptor(ctx, in, info, handler)
}

// GGBFlow_ServiceDesc is the grpc.ServiceDesc for GGBFlow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GGBFlow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ggbflow.GGBFlow",
	HandlerType: (*GGBFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _GGBFlow_HealthCheck_Handler,
		},
		{
			MethodName: "LoadDiscreteFlow",
			Handler:    _GGBFlow_LoadDiscreteFlow_Handler,
		},
		{
			MethodName: "SendDiscreteFlow",
			Handler:    _GGBFlow_SendDiscreteFlow_Handler,
		},
		{
			MethodName: "SaveMeta",
			Handler:    _GGBFlow_SaveMeta_Handler,
		},
		{
			MethodName: "LoadMeta",
			Handler:    _GGBFlow_LoadMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadFlow",
			Handler:       _GGBFlow_LoadFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendFlow",
			Handler:       _GGBFlow_SendFlow_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gg-bflow.proto",
}
