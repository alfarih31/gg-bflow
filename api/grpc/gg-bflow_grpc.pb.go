// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gg_bflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GGBFlowClient is the client API for GGBFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GGBFlowClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckRes, error)
}

type gGBFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewGGBFlowClient(cc grpc.ClientConnInterface) GGBFlowClient {
	return &gGBFlowClient{cc}
}

func (c *gGBFlowClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckRes, error) {
	out := new(HealthCheckRes)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlow/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GGBFlowServer is the server API for GGBFlow service.
// All implementations must embed UnimplementedGGBFlowServer
// for forward compatibility
type GGBFlowServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckRes, error)
	mustEmbedUnimplementedGGBFlowServer()
}

// UnimplementedGGBFlowServer must be embedded to have forward compatible implementations.
type UnimplementedGGBFlowServer struct {
}

func (UnimplementedGGBFlowServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGGBFlowServer) mustEmbedUnimplementedGGBFlowServer() {}

// UnsafeGGBFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GGBFlowServer will
// result in compilation errors.
type UnsafeGGBFlowServer interface {
	mustEmbedUnimplementedGGBFlowServer()
}

func RegisterGGBFlowServer(s grpc.ServiceRegistrar, srv GGBFlowServer) {
	s.RegisterService(&GGBFlow_ServiceDesc, srv)
}

func _GGBFlow_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlow/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GGBFlow_ServiceDesc is the grpc.ServiceDesc for GGBFlow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GGBFlow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ggbflow.GGBFlow",
	HandlerType: (*GGBFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _GGBFlow_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gg-bflow.proto",
}

// GGBFlowStreamerClient is the client API for GGBFlowStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GGBFlowStreamerClient interface {
	SendDiscreteFlow(ctx context.Context, in *SendFlowArg, opts ...grpc.CallOption) (*Ok, error)
	SendFlow(ctx context.Context, opts ...grpc.CallOption) (GGBFlowStreamer_SendFlowClient, error)
	SaveMeta(ctx context.Context, in *SaveMetaArg, opts ...grpc.CallOption) (*Ok, error)
}

type gGBFlowStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewGGBFlowStreamerClient(cc grpc.ClientConnInterface) GGBFlowStreamerClient {
	return &gGBFlowStreamerClient{cc}
}

func (c *gGBFlowStreamerClient) SendDiscreteFlow(ctx context.Context, in *SendFlowArg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlowStreamer/SendDiscreteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gGBFlowStreamerClient) SendFlow(ctx context.Context, opts ...grpc.CallOption) (GGBFlowStreamer_SendFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &GGBFlowStreamer_ServiceDesc.Streams[0], "/ggbflow.GGBFlowStreamer/SendFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &gGBFlowStreamerSendFlowClient{stream}
	return x, nil
}

type GGBFlowStreamer_SendFlowClient interface {
	Send(*SendFlowArg) error
	CloseAndRecv() (*Ok, error)
	grpc.ClientStream
}

type gGBFlowStreamerSendFlowClient struct {
	grpc.ClientStream
}

func (x *gGBFlowStreamerSendFlowClient) Send(m *SendFlowArg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gGBFlowStreamerSendFlowClient) CloseAndRecv() (*Ok, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ok)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gGBFlowStreamerClient) SaveMeta(ctx context.Context, in *SaveMetaArg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlowStreamer/SaveMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GGBFlowStreamerServer is the server API for GGBFlowStreamer service.
// All implementations must embed UnimplementedGGBFlowStreamerServer
// for forward compatibility
type GGBFlowStreamerServer interface {
	SendDiscreteFlow(context.Context, *SendFlowArg) (*Ok, error)
	SendFlow(GGBFlowStreamer_SendFlowServer) error
	SaveMeta(context.Context, *SaveMetaArg) (*Ok, error)
	mustEmbedUnimplementedGGBFlowStreamerServer()
}

// UnimplementedGGBFlowStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedGGBFlowStreamerServer struct {
}

func (UnimplementedGGBFlowStreamerServer) SendDiscreteFlow(context.Context, *SendFlowArg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDiscreteFlow not implemented")
}
func (UnimplementedGGBFlowStreamerServer) SendFlow(GGBFlowStreamer_SendFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFlow not implemented")
}
func (UnimplementedGGBFlowStreamerServer) SaveMeta(context.Context, *SaveMetaArg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMeta not implemented")
}
func (UnimplementedGGBFlowStreamerServer) mustEmbedUnimplementedGGBFlowStreamerServer() {}

// UnsafeGGBFlowStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GGBFlowStreamerServer will
// result in compilation errors.
type UnsafeGGBFlowStreamerServer interface {
	mustEmbedUnimplementedGGBFlowStreamerServer()
}

func RegisterGGBFlowStreamerServer(s grpc.ServiceRegistrar, srv GGBFlowStreamerServer) {
	s.RegisterService(&GGBFlowStreamer_ServiceDesc, srv)
}

func _GGBFlowStreamer_SendDiscreteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFlowArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowStreamerServer).SendDiscreteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlowStreamer/SendDiscreteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowStreamerServer).SendDiscreteFlow(ctx, req.(*SendFlowArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _GGBFlowStreamer_SendFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GGBFlowStreamerServer).SendFlow(&gGBFlowStreamerSendFlowServer{stream})
}

type GGBFlowStreamer_SendFlowServer interface {
	SendAndClose(*Ok) error
	Recv() (*SendFlowArg, error)
	grpc.ServerStream
}

type gGBFlowStreamerSendFlowServer struct {
	grpc.ServerStream
}

func (x *gGBFlowStreamerSendFlowServer) SendAndClose(m *Ok) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gGBFlowStreamerSendFlowServer) Recv() (*SendFlowArg, error) {
	m := new(SendFlowArg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GGBFlowStreamer_SaveMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMetaArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowStreamerServer).SaveMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlowStreamer/SaveMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowStreamerServer).SaveMeta(ctx, req.(*SaveMetaArg))
	}
	return interceptor(ctx, in, info, handler)
}

// GGBFlowStreamer_ServiceDesc is the grpc.ServiceDesc for GGBFlowStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GGBFlowStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ggbflow.GGBFlowStreamer",
	HandlerType: (*GGBFlowStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDiscreteFlow",
			Handler:    _GGBFlowStreamer_SendDiscreteFlow_Handler,
		},
		{
			MethodName: "SaveMeta",
			Handler:    _GGBFlowStreamer_SaveMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFlow",
			Handler:       _GGBFlowStreamer_SendFlow_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gg-bflow.proto",
}

// GGBFlowViewerClient is the client API for GGBFlowViewer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GGBFlowViewerClient interface {
	LoadDiscreteFlow(ctx context.Context, in *LoadDiscreteFlowArg, opts ...grpc.CallOption) (*DiscreteFlowRes, error)
	LoadFlow(ctx context.Context, in *LoadFlowArg, opts ...grpc.CallOption) (GGBFlowViewer_LoadFlowClient, error)
	LoadMeta(ctx context.Context, in *LoadMetaArg, opts ...grpc.CallOption) (*MetaRes, error)
}

type gGBFlowViewerClient struct {
	cc grpc.ClientConnInterface
}

func NewGGBFlowViewerClient(cc grpc.ClientConnInterface) GGBFlowViewerClient {
	return &gGBFlowViewerClient{cc}
}

func (c *gGBFlowViewerClient) LoadDiscreteFlow(ctx context.Context, in *LoadDiscreteFlowArg, opts ...grpc.CallOption) (*DiscreteFlowRes, error) {
	out := new(DiscreteFlowRes)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlowViewer/LoadDiscreteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gGBFlowViewerClient) LoadFlow(ctx context.Context, in *LoadFlowArg, opts ...grpc.CallOption) (GGBFlowViewer_LoadFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &GGBFlowViewer_ServiceDesc.Streams[0], "/ggbflow.GGBFlowViewer/LoadFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &gGBFlowViewerLoadFlowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GGBFlowViewer_LoadFlowClient interface {
	Recv() (*FlowRes, error)
	grpc.ClientStream
}

type gGBFlowViewerLoadFlowClient struct {
	grpc.ClientStream
}

func (x *gGBFlowViewerLoadFlowClient) Recv() (*FlowRes, error) {
	m := new(FlowRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gGBFlowViewerClient) LoadMeta(ctx context.Context, in *LoadMetaArg, opts ...grpc.CallOption) (*MetaRes, error) {
	out := new(MetaRes)
	err := c.cc.Invoke(ctx, "/ggbflow.GGBFlowViewer/LoadMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GGBFlowViewerServer is the server API for GGBFlowViewer service.
// All implementations must embed UnimplementedGGBFlowViewerServer
// for forward compatibility
type GGBFlowViewerServer interface {
	LoadDiscreteFlow(context.Context, *LoadDiscreteFlowArg) (*DiscreteFlowRes, error)
	LoadFlow(*LoadFlowArg, GGBFlowViewer_LoadFlowServer) error
	LoadMeta(context.Context, *LoadMetaArg) (*MetaRes, error)
	mustEmbedUnimplementedGGBFlowViewerServer()
}

// UnimplementedGGBFlowViewerServer must be embedded to have forward compatible implementations.
type UnimplementedGGBFlowViewerServer struct {
}

func (UnimplementedGGBFlowViewerServer) LoadDiscreteFlow(context.Context, *LoadDiscreteFlowArg) (*DiscreteFlowRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadDiscreteFlow not implemented")
}
func (UnimplementedGGBFlowViewerServer) LoadFlow(*LoadFlowArg, GGBFlowViewer_LoadFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadFlow not implemented")
}
func (UnimplementedGGBFlowViewerServer) LoadMeta(context.Context, *LoadMetaArg) (*MetaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMeta not implemented")
}
func (UnimplementedGGBFlowViewerServer) mustEmbedUnimplementedGGBFlowViewerServer() {}

// UnsafeGGBFlowViewerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GGBFlowViewerServer will
// result in compilation errors.
type UnsafeGGBFlowViewerServer interface {
	mustEmbedUnimplementedGGBFlowViewerServer()
}

func RegisterGGBFlowViewerServer(s grpc.ServiceRegistrar, srv GGBFlowViewerServer) {
	s.RegisterService(&GGBFlowViewer_ServiceDesc, srv)
}

func _GGBFlowViewer_LoadDiscreteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadDiscreteFlowArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowViewerServer).LoadDiscreteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlowViewer/LoadDiscreteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowViewerServer).LoadDiscreteFlow(ctx, req.(*LoadDiscreteFlowArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _GGBFlowViewer_LoadFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadFlowArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GGBFlowViewerServer).LoadFlow(m, &gGBFlowViewerLoadFlowServer{stream})
}

type GGBFlowViewer_LoadFlowServer interface {
	Send(*FlowRes) error
	grpc.ServerStream
}

type gGBFlowViewerLoadFlowServer struct {
	grpc.ServerStream
}

func (x *gGBFlowViewerLoadFlowServer) Send(m *FlowRes) error {
	return x.ServerStream.SendMsg(m)
}

func _GGBFlowViewer_LoadMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadMetaArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GGBFlowViewerServer).LoadMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggbflow.GGBFlowViewer/LoadMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GGBFlowViewerServer).LoadMeta(ctx, req.(*LoadMetaArg))
	}
	return interceptor(ctx, in, info, handler)
}

// GGBFlowViewer_ServiceDesc is the grpc.ServiceDesc for GGBFlowViewer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GGBFlowViewer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ggbflow.GGBFlowViewer",
	HandlerType: (*GGBFlowViewerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadDiscreteFlow",
			Handler:    _GGBFlowViewer_LoadDiscreteFlow_Handler,
		},
		{
			MethodName: "LoadMeta",
			Handler:    _GGBFlowViewer_LoadMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadFlow",
			Handler:       _GGBFlowViewer_LoadFlow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gg-bflow.proto",
}
